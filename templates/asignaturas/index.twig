{% extends "base.twig" %}

{% block title %}Asignaturas - Sistema de Bibliografía{% endblock %}

{% block content %}
<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-gray-800">Asignaturas</h1>
        <div>
            <a href="{{ app_url }}asignaturas/vinculacion" class="btn btn-info me-2">
                <i class="fas fa-link"></i> Vincular Asignaturas Electivas
            </a>
        <a href="{{ app_url }}asignaturas/create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Nueva Asignatura
        </a>
        </div>
    </div>

    <!-- Filtros -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Filtros de Búsqueda</h6>
        </div>
        <div class="card-body">
            <form method="GET" action="{{ app_url }}asignaturas" class="row g-3">
                <div class="col-md-4">
                    <label for="nombre" class="form-label">Nombre</label>
                    <input type="text" class="form-control" id="nombre" name="nombre" value="{{ filtros.nombre|default('') }}" placeholder="Buscar por nombre...">
                </div>
                <div class="col-md-4">
                    <label for="tipo" class="form-label">Tipo</label>
                    <select class="form-select" id="tipo" name="tipo">
                        <option value="">Todos los tipos</option>
                        <option value="REGULAR" {% if filtros.tipo == 'REGULAR' %}selected{% endif %}>Regular</option>
                        <option value="FORMACION_BASICA" {% if filtros.tipo == 'FORMACION_BASICA' %}selected{% endif %}>Formación Básica</option>
                        <option value="FORMACION_GENERAL" {% if filtros.tipo == 'FORMACION_GENERAL' %}selected{% endif %}>Formación General</option>
                        <option value="FORMACION_IDIOMAS" {% if filtros.tipo == 'FORMACION_IDIOMAS' %}selected{% endif %}>Formación Idiomas</option>
                        <option value="FORMACION_PROFESIONAL" {% if filtros.tipo == 'FORMACION_PROFESIONAL' %}selected{% endif %}>Formación Profesional</option>
                        <option value="FORMACION_VALORES" {% if filtros.tipo == 'FORMACION_VALORES' %}selected{% endif %}>Formación Valores</option>
                        <option value="FORMACION_ESPECIALIDAD" {% if filtros.tipo == 'FORMACION_ESPECIALIDAD' %}selected{% endif %}>Formación Especialidad</option>
                        <option value="FORMACION_ELECTIVA" {% if filtros.tipo == 'FORMACION_ELECTIVA' %}selected{% endif %}>Formación Electiva</option>
                        <option value="FORMACION_ESPECIAL" {% if filtros.tipo == 'FORMACION_ESPECIAL' %}selected{% endif %}>Formación Especial</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="unidad" class="form-label">Unidad</label>
                    <select class="form-select" id="unidad" name="unidad">
                        <option value="">Todas las unidades</option>
                        {% for unidad in unidades %}
                            <option value="{{ unidad.id }}" {% if filtros.unidad == unidad.id %}selected{% endif %}>
                                {{ unidad.nombre }}
                            </option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="estado" class="form-label">Estado</label>
                    <select class="form-select" id="estado" name="estado">
                        <option value="">Todos</option>
                        <option value="1" {% if filtros.estado == '1' %}selected{% endif %}>Activo</option>
                        <option value="0" {% if filtros.estado == '0' %}selected{% endif %}>Inactivo</option>
                    </select>
                </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12 d-flex gap-2" style="padding-left: 2rem; padding-right: 2rem; padding-bottom: 2rem;">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-filter"></i> Aplicar Filtros
                        </button>
                        <a href="{{ app_url }}asignaturas" class="btn btn-secondary">
                            <i class="fas fa-times"></i> Limpiar Filtros
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Tabla de asignaturas -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Tipo</th>
                            <th>Vigencia</th>
                            <th>Periodicidad</th>
                            <th>Estado</th>
                            <th>Unidades</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for asignatura in asignaturas %}
                        <tr>
                            <td>{{ asignatura.nombre }}</td>
                            <td>{{ asignatura.tipo }}</td>
                            <td>{{ asignatura.vigencia_desde }} - {{ asignatura.vigencia_hasta }}</td>
                            <td>{{ asignatura.periodicidad }}</td>
                            <td>
                                <span class="badge bg-{{ asignatura.estado == '1' ? 'success' : 'danger' }}">
                                    {{ asignatura.estado == '1' ? 'Activo' : 'Inactivo' }}
                                </span>
                            </td>
                            <td style="white-space: pre-line">{{ asignatura.unidades|default('Sin unidad') }}</td>
                            <td>
                                <div class="btn-group">
                                    <a href="{{ app_url }}asignaturas/{{ asignatura.id }}" class="btn btn-sm btn-primary" title="Ver">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a href="{{ app_url }}asignaturas/{{ asignatura.id }}/edit" class="btn btn-sm btn-warning" title="Editar">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <form action="{{ app_url }}asignaturas/{{ asignatura.id }}/delete" method="POST" class="d-inline delete-form">
                                        <button type="submit" class="btn btn-sm btn-danger" title="Eliminar">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </form>
                                </div>
                            </td>
                        </tr>
                        {% else %}
                        <tr>
                            <td colspan="7" class="text-center">No se encontraron asignaturas</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Manejar el envío del formulario de eliminación
    const deleteForms = document.querySelectorAll('.delete-form');
    deleteForms.forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            Swal.fire({
                title: '¿Está seguro?',
                text: "Esta acción no se puede deshacer",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Mostrar indicador de carga
                    Swal.fire({
                        title: 'Eliminando...',
                        text: 'Por favor espere',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });
                    
                    // Enviar la solicitud AJAX
                    fetch(form.action, {
                        method: 'POST',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Error en la respuesta del servidor');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Cerrar el indicador de carga
                        Swal.close();
                        
                        if (data.success) {
                            // Mostrar mensaje de éxito
                            Swal.fire({
                                title: '¡Eliminado!',
                                text: data.message,
                                icon: 'success',
                                confirmButtonColor: '#28a745',
                                confirmButtonText: 'Aceptar'
                            }).then(() => {
                                // Recargar la página para actualizar la lista
                                window.location.reload();
                            });
                        } else {
                            // Determinar el tipo de icono basado en el tipo de respuesta
                            let icon = 'error';
                            if (data.type === 'warning') {
                                icon = 'warning';
                            } else if (data.type === 'info') {
                                icon = 'info';
                            }
                            
                            Swal.fire({
                                title: data.type === 'warning' ? 'Advertencia' : 'Error',
                                text: data.message,
                                icon: icon,
                                confirmButtonColor: data.type === 'warning' ? '#ffc107' : '#d33',
                                confirmButtonText: 'Aceptar'
                            });
                        }
                    })
                    .catch(error => {
                        // Cerrar el indicador de carga
                        Swal.close();
                        
                        console.error('Error:', error);
                        Swal.fire({
                            title: 'Error',
                            text: 'Ocurrió un error al procesar la solicitud',
                            icon: 'error',
                            confirmButtonColor: '#d33',
                            confirmButtonText: 'Aceptar'
                        });
                    });
                }
            });
        });
    });

    // Mostrar mensajes de éxito o error si existen y limpiarlos
    {% if session.success %}
        Swal.fire({
            title: '¡Éxito!',
            text: '{{ session.success }}',
            icon: 'success',
            confirmButtonColor: '#28a745',
            confirmButtonText: 'Aceptar'
        }).then(() => {
            // Limpiar el mensaje de sesión
            fetch('{{ app_url }}clear-session-messages', {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
        });
    {% endif %}

    {% if session.error %}
        Swal.fire({
            title: 'Error',
            text: '{{ session.error }}',
            icon: 'error',
            confirmButtonColor: '#d33',
            confirmButtonText: 'Aceptar'
        }).then(() => {
            // Limpiar el mensaje de sesión
            fetch('{{ app_url }}clear-session-messages', {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
        });
    {% endif %}
});
</script>
{% endblock %} 