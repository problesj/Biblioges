{% extends 'base.twig' %}

{% block title %}Vincular Asignaturas - {{ bibliografia.titulo }}{% endblock %}

{% block content %}
<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Vincular Asignaturas</h1>
        <a href="{{ app_url }}bibliografias-declaradas" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Volver
        </a>
    </div>

    <!-- Detalles de la Bibliografía -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Detalles de la Bibliografía</h5>
        </div>
        <div class="card-body">
            <div class="row mb-2">
                <div class="col-md-4">
                    <strong>Título:</strong> {{ bibliografia.titulo }}
                </div>
                <div class="col-md-4">
                    <strong>Año de Edición:</strong> {{ bibliografia.anio_publicacion }}
                </div>
                <div class="col-md-4">
                    <strong>Editorial:</strong> {{ bibliografia.editorial }}
                </div>
            </div>
            <div class="row mb-2">
                <div class="col-md-6">
                    <strong>Edición:</strong> {{ bibliografia.edicion }}
                </div>
                <div class="col-md-6">
                    <strong>Formato:</strong> {{ bibliografia.formato }}
                </div>
            </div>
            <div class="row mb-2">
                <div class="col-12">
                    <strong>URL:</strong> 
                    {% if bibliografia.url %}
                        <a href="{{ bibliografia.url }}" target="_blank">{{ bibliografia.url }}</a>
                    {% else %}
                        No disponible
                    {% endif %}
                </div>
            </div>
            <div class="row mb-2">
                <div class="col-12">
                    <strong>Autores:</strong>
                    {% if bibliografia.autores is defined and bibliografia.autores|length > 0 %}
                        {{ bibliografia.autores|map(a => a.apellidos ~ ', ' ~ a.nombres)|join('; ') }}
                    {% else %}
                        No hay autores registrados
                    {% endif %}
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <strong>Datos Específicos:</strong>
                    {% if bibliografia.tipo == 'libro' %}
                        <p><strong>ISBN:</strong> {{ bibliografia.isbn }}</p>
                    {% elseif bibliografia.tipo == 'tesis' %}
                        <p><strong>Carrera:</strong> {{ bibliografia.carrera_nombre }}</p>
                    {% elseif bibliografia.tipo == 'articulo' %}
                        <p><strong>ISSN:</strong> {{ bibliografia.issn }}</p>
                        <p><strong>Revista:</strong> {{ bibliografia.titulo_revista }}</p>
                        <p><strong>Cronología:</strong> {{ bibliografia.cronologia }}</p>
                    {% elseif bibliografia.tipo == 'generico' %}
                        <p><strong>Descripción:</strong> {{ bibliografia.descripcion }}</p>
                    {% elseif bibliografia.tipo == 'sitio_web' %}
                        <p><strong>Fecha de Consulta:</strong> {{ bibliografia.fecha_consulta }}</p>
                    {% elseif bibliografia.tipo == 'software' %}
                        <p><strong>Versión:</strong> {{ bibliografia.version }}</p>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>

    <!-- Filtros -->
    <div class="card mb-4">
        <div class="card-header">
            <h3 class="card-title mb-0">Filtros</h3>
        </div>
        <div class="card-body">
            <form id="filtroForm" class="row g-3">
                <div class="col-md-6">
                    <label for="ubicacion" class="form-label">Ubicación</label>
                    <select name="ubicacion" id="ubicacion" class="form-select">
                        <option value="">Todas las ubicaciones</option>
                        {% for sede in sedes %}
                            <optgroup label="{{ sede.nombre }}">
                                {% for facultad in sede.facultades %}
                                    <optgroup label="&nbsp;&nbsp;{{ facultad.nombre }}">
                                        {% for departamento in facultad.departamentos %}
                                            <option value="d_{{ departamento.id }}">&nbsp;&nbsp;&nbsp;&nbsp;{{ departamento.nombre }}</option>
                                        {% endfor %}
                                    </optgroup>
                                {% endfor %}
                            </optgroup>
                        {% endfor %}
                    </select>
                </div>
                <div class="col-md-6">
                    <label for="tipo_asignatura" class="form-label">Tipo de Asignatura</label>
                    <select name="tipo_asignatura" id="tipo_asignatura" class="form-select">
                        <option value="">Todos</option>
                        <option value="REGULAR">Regular</option>
                        <option value="FORMACION_BASICA">Formación Básica</option>
                        <option value="FORMACION_GENERAL">Formación General</option>
                        <option value="FORMACION_IDIOMAS">Formación Idiomas</option>
                        <option value="FORMACION_PROFESIONAL">Formación Profesional</option>
                        <option value="FORMACION_VALORES">Formación Valores</option>
                        <option value="FORMACION_ESPECIALIDAD">Formación Especialidad</option>
                        <option value="FORMACION_ESPECIAL">Formación Especial</option>
                    </select>
                </div>
            </form>
        </div>
    </div>

    <!-- Paneles de Asignaturas -->
    <div class="row">
        <!-- Asignaturas Disponibles -->
        <div class="col-12">
            <div class="card h-100">
                <div class="card-header">
                    <h3 class="card-title mb-0">Asignaturas Disponibles</h3>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive" style="max-height: calc(100vh - 400px); overflow-y: auto;">
                        <table id="tablaAsignaturas" class="table table-striped table-hover mb-0">
                            <thead class="sticky-top bg-white">
                                <tr>
                                    <th style="width: 5%">
                                        <input type="checkbox" id="seleccionarTodasDisponibles" class="form-check-input">
                                    </th>
                                    <th style="width: 25%">Código</th>
                                    <th style="width: 50%">Nombre</th>
                                    <th style="width: 20%">Tipo Bibliografía</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for asignatura in asignaturas_disponibles %}
                                <tr>
                                    <td class="align-top">
                                        <input type="checkbox" class="form-check-input" name="asignaturas[]" value="{{ asignatura.id }}" data-nombre="{{ asignatura.nombre }}" data-tipo="{{ asignatura.tipo }}">
                                    </td>
                                    <td class="align-top">
                                        <div style="font-size: 0.9em; word-break: break-all;">
                                            {{ asignatura.codigos|replace({', ': '\n'})|trim|nl2br }}
                                        </div>
                                    </td>
                                    <td class="align-top">{{ asignatura.nombre }}</td>
                                    <td class="align-top">
                                        <div class="form-check">
                                            <input class="form-check-input tipo-bibliografia" type="radio" 
                                                   name="tipo_bibliografia_{{ asignatura.id }}" 
                                                   value="basica" 
                                                   data-asignatura-id="{{ asignatura.id }}"
                                                   checked>
                                            <label class="form-check-label">Básica</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input tipo-bibliografia" type="radio" 
                                                   name="tipo_bibliografia_{{ asignatura.id }}" 
                                                   value="complementaria" 
                                                   data-asignatura-id="{{ asignatura.id }}">
                                            <label class="form-check-label">Complementaria</label>
                                        </div>
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <!-- Botones de Acción -->
        <div class="col-12 d-flex align-items-center justify-content-center">
            <div class="btn-group gap-2 mb-4">
                <button type="button" class="btn btn-success mb-2" onclick="agregarSeleccionadas()">
                    <i class="fas fa-arrow-down"></i>
                </button>
                <button type="button" class="btn btn-danger mb-2" onclick="quitarSeleccionadas()">
                    <i class="fas fa-arrow-up"></i>
                </button>
            </div>
        </div>
    </div>
    <div class="row">
        <!-- Asignaturas Vinculadas -->
        <div class="col-12">
            <div class="card h-100">
                <div class="card-header">
                    <h3 class="card-title mb-0">Asignaturas Vinculadas</h3>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive" style="max-height: calc(100vh - 400px); overflow-y: auto;">
                        <table id="tablaVinculadas" class="table table-striped table-hover mb-0">
                            <thead class="sticky-top bg-white">
                                <tr>
                                    <th style="width: 5%">
                                        <input type="checkbox" id="seleccionarTodasVinculadas" class="form-check-input">
                                    </th>
                                    <th style="width: 25%">Código</th>
                                    <th style="width: 50%">Nombre</th>
                                    <th style="width: 20%">Tipo Bibliografía</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for asignatura in asignaturas_vinculadas %}
                                <tr>
                                    <td>
                                        <input type="checkbox" class="form-check-input" name="vinculaciones[]" value="{{ asignatura.vinculacion_id }}">
                                    </td>
                                    <td>
                                        <div style="font-size: 0.9em;">
                                            {% if asignatura.codigos %}
                                                {{ asignatura.codigos|trim|nl2br }}
                                            {% else %}
                                                Sin código
                                            {% endif %}
                                        </div>
                                    </td>
                                    <td>{{ asignatura.nombre }}</td>
                                    <td>{{ asignatura.tipo_bibliografia }}</td>
                                </tr>
                                {% else %}
                                <tr>
                                    <td colspan="4" class="text-center">No hay asignaturas vinculadas</td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
// Función para aplicar filtros
document.getElementById('filtroForm').addEventListener('change', function() {
    const formData = new FormData(this);
    const params = new URLSearchParams();
    
    // Extraer el ID del departamento si se seleccionó una ubicación
    const ubicacion = formData.get('ubicacion');
    if (ubicacion && ubicacion.startsWith('d_')) {
        params.set('departamento', ubicacion.substring(2));
    }
    
    // Agregar el tipo de asignatura si está seleccionado
    const tipoAsignatura = formData.get('tipo_asignatura');
    if (tipoAsignatura) {
        params.set('tipo_asignatura', tipoAsignatura);
    }
    
    // Realizar la petición AJAX
    fetch(`{{ app_url ~ 'bibliografias-declaradas/' ~ bibliografia.id ~ '/vincular?' ~ params.toString() }}`)
        .then(response => response.text())
        .then(html => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            
            // Actualizar la tabla de asignaturas disponibles
            const nuevaTabla = doc.querySelector('#tablaAsignaturas tbody');
            if (nuevaTabla) {
                document.querySelector('#tablaAsignaturas tbody').innerHTML = nuevaTabla.innerHTML;
            }
        })
        .catch(error => {
            console.error('Error al aplicar filtros:', error);
            alert('Error al aplicar los filtros. Por favor, intente nuevamente.');
        });
});

// Función para agregar múltiples asignaturas
function agregarSeleccionadas() {
    const checkboxes = document.querySelectorAll('#tablaAsignaturas input[type="checkbox"]:checked');
    if (checkboxes.length === 0) {
        Swal.fire({
            icon: 'warning',
            title: 'Atención',
            text: 'Por favor, seleccione al menos una asignatura'
        });
        return;
    }

    const asignaturas = [];
    let error = false;

    checkboxes.forEach(checkbox => {
        const asignaturaId = checkbox.value;
        const radio = document.querySelector(`.tipo-bibliografia[data-asignatura-id="${asignaturaId}"]:checked`);
        
        if (!radio) {
            Swal.fire({
                icon: 'warning',
                title: 'Atención',
                text: 'Por favor, seleccione el tipo de bibliografía para todas las asignaturas seleccionadas'
            });
            error = true;
            return;
        }

        const tipo = radio.value;
        if (!tipo) {
            Swal.fire({
                icon: 'warning',
                title: 'Atención',
                text: 'Por favor, seleccione el tipo de bibliografía para todas las asignaturas seleccionadas'
            });
            error = true;
            return;
        }

        asignaturas.push({
            asignatura_id: asignaturaId,
            tipo_bibliografia: tipo
        });
    });

    if (error) return;

    // Mostrar indicador de carga
    const boton = document.querySelector('button[onclick="agregarSeleccionadas()"]');
    const textoOriginal = boton.innerHTML;
    boton.disabled = true;
    boton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando...';

    // Preparar los datos a enviar
    const dataToSend = {
        asignaturas: asignaturas
    };

    // Realizar la petición AJAX
    const url = `{{ app_url ~ 'bibliografias-declaradas/' ~ bibliografia.id ~ '/vincular' }}`;

    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
        },
        body: JSON.stringify(dataToSend)
    })
    .then(async response => {
        if (!response.ok) {
            throw new Error(`Error HTTP: ${response.status}`);
        }

        const text = await response.text();
        if (!text.trim()) {
            throw new Error('La respuesta del servidor está vacía');
        }

        try {
            return JSON.parse(text);
        } catch (e) {
            throw new Error('Error al procesar la respuesta del servidor: ' + e.message);
        }
    })
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Éxito',
                text: data.message,
                showConfirmButton: true
            }).then((result) => {
                if (result.isConfirmed) {
                    location.reload();
                }
            });
        } else {
            throw new Error(data.message || 'Error al vincular las asignaturas');
        }
    })
    .catch(error => {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Error al desvincular las asignaturas. Por favor, intente nuevamente.'
        });
    });
}

// Función para quitar múltiples asignaturas
function quitarSeleccionadas() {
    const checkboxes = document.querySelectorAll('#tablaVinculadas input[type="checkbox"]:checked');
    if (checkboxes.length === 0) {
        Swal.fire({
            icon: 'warning',
            title: 'Atención',
            text: 'Por favor, seleccione al menos una asignatura para desvincular'
        });
        return;
    }

    Swal.fire({
        icon: 'question',
        title: 'Confirmar',
        text: '¿Está seguro de desvincular las asignaturas seleccionadas?',
        showCancelButton: true,
        confirmButtonText: 'Sí, desvincular',
        cancelButtonText: 'Cancelar'
    }).then((result) => {
        if (result.isConfirmed) {
            const vinculaciones = Array.from(checkboxes).map(cb => cb.value);
            
            // Mostrar indicador de carga
            const boton = document.querySelector('button[onclick="quitarSeleccionadas()"]');
            const textoOriginal = boton.innerHTML;
            boton.disabled = true;
            boton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando...';

            // Asegurar que la URL sea correcta
            const url = `{{ app_url }}bibliografias-declaradas/{{ bibliografia.id }}/desvincularMultiple`;
            console.log('Enviando petición a:', url);
            console.log('Datos a enviar:', { vinculaciones });

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    vinculaciones: vinculaciones
                })
            })
            .then(async response => {
                console.log('Respuesta recibida:', response);
                console.log('Status:', response.status);
                
                const text = await response.text();
                console.log('Respuesta texto:', text);
                
                if (!text) {
                    throw new Error('La respuesta del servidor está vacía');
                }
                
                try {
                    return JSON.parse(text);
                } catch (e) {
                    console.error('Error al parsear JSON:', e);
                    throw new Error('La respuesta del servidor no es un JSON válido: ' + text);
                }
            })
            .then(data => {
                console.log('Datos procesados:', data);
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Éxito',
                        text: data.message,
                        showConfirmButton: true
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Forzar una recarga completa de la página
                            window.location.href = `{{ app_url }}bibliografias-declaradas/{{ bibliografia.id }}/vincular`;
                        }
                    });
                } else {
                    throw new Error(data.message || 'Error al desvincular las asignaturas');
                }
            })
            .catch(error => {
                console.error('Error completo:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Error al desvincular las asignaturas. Por favor, intente nuevamente.'
                });
            })
            .finally(() => {
                // Restaurar el botón
                boton.disabled = false;
                boton.innerHTML = textoOriginal;
            });
        }
    });
}

// Agregar evento para el checkbox "Seleccionar todas"
document.getElementById('seleccionarTodasVinculadas').addEventListener('change', function() {
    const checkboxes = document.querySelectorAll('#tablaVinculadas tbody input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
    });
});

// Función para agregar una asignatura
function agregarAsignatura(asignaturaId) {
    const radio = document.querySelector(`.tipo-bibliografia[data-asignatura-id="${asignaturaId}"]:checked`);
    if (!radio) {
        alert('Por favor, seleccione el tipo de bibliografía');
        return;
    }

    const tipoBibliografia = radio.value;
    if (!tipoBibliografia) {
        alert('Por favor, seleccione el tipo de bibliografía');
        return;
    }

    // Mostrar indicador de carga
    const boton = document.querySelector(`button[onclick="agregarAsignatura(${asignaturaId})"]`);
    const textoOriginal = boton.innerHTML;
    boton.disabled = true;
    boton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

    const url = `{{ app_url ~ 'bibliografias-declaradas/' ~ bibliografia.id ~ '/vincularSingle' }}`;
    console.log('Enviando petición a:', url);
    
    const data = {
        asignatura_id: asignaturaId,
        tipo_bibliografia: tipoBibliografia
    };
    console.log('Datos a enviar:', data);

    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(async response => {
        console.log('Respuesta recibida:', response);
        console.log('Status:', response.status);
        console.log('Headers:', Object.fromEntries(response.headers.entries()));
        
        const text = await response.text();
        console.log('Respuesta texto:', text);
        
        if (!text) {
            throw new Error('La respuesta del servidor está vacía');
        }
        
        try {
            const data = JSON.parse(text);
            console.log('Datos procesados:', data);
            
            if (data.success) {
                location.reload();
            } else {
                throw new Error(data.message || 'Error al vincular la asignatura');
            }
        } catch (e) {
            console.error('Error al parsear JSON:', e);
            throw new Error('La respuesta del servidor no es un JSON válido: ' + text);
        }
    })
    .catch(error => {
        console.error('Error completo:', error);
        alert('Error al vincular la asignatura: ' + error.message);
    })
    .finally(() => {
        // Restaurar el botón
        boton.disabled = false;
        boton.innerHTML = textoOriginal;
    });
}
</script>
{% endblock %} 