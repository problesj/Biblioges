{% extends 'base.twig' %}

{% block title %}Buscar en Catálogo - {{ bibliografia.titulo }}{% endblock %}

{% block content %}
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Datos de la Bibliografía Declarada</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Tipo de Bibliografía:</strong> {{ bibliografia.tipo|title }}</p>
                            <p><strong>Título:</strong> {{ bibliografia.titulo }}</p>
                            <p><strong>Autor(es):</strong> {{ bibliografia.autores }}</p>
                            <p><strong>Año de Edición:</strong> {{ bibliografia.anio_publicacion }}</p>
                            <p><strong>Editorial:</strong> {{ bibliografia.editorial }}</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Edición:</strong> {{ bibliografia.edicion }}</p>
                            <p><strong>Formato:</strong> {{ bibliografia.formato|title }}</p>
                            <div class="mt-3">
                                <h6>Datos Específicos:</h6>
                                {% if bibliografia.tipo == 'libro' %}
                                    <p><strong>ISBN:</strong> {{ bibliografia.isbn }}</p>
                                {% elseif bibliografia.tipo == 'articulo' %}
                                    <p><strong>ISSN:</strong> {{ bibliografia.issn }}</p>
                                    <p><strong>Revista:</strong> {{ bibliografia.titulo_revista }}</p>
                                    <p><strong>Cronología:</strong> {{ bibliografia.cronologia }}</p>
                                {% elseif bibliografia.tipo == 'tesis' %}
                                    <p><strong>Carrera:</strong> {{ bibliografia.carrera_nombre }}</p>
                                {% elseif bibliografia.tipo == 'sitio_web' %}
                                    <p><strong>Fecha de Consulta:</strong> {{ bibliografia.fecha_consulta }}</p>
                                {% elseif bibliografia.tipo == 'software' %}
                                    <p><strong>Versión:</strong> {{ bibliografia.version }}</p>
                                {% elseif bibliografia.tipo == 'generico' %}
                                    <p><strong>Descripción:</strong> {{ bibliografia.descripcion }}</p>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Buscar en Catálogo</h5>
                </div>
                <div class="card-body">
                    <form id="searchForm" class="mb-4">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="titulo">Título</label>
                                    <input type="text" class="form-control" id="titulo" name="titulo" value="{{ bibliografia.titulo }}">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="autor">Autor</label>
                                    <input type="text" class="form-control" id="autor" name="autor" value="{{ bibliografia.autores|split(';')|first }}">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="busqueda_adicional">Búsqueda Adicional</label>
                                    <input type="text" class="form-control" id="busqueda_adicional" name="busqueda_adicional" placeholder="Editorial u otra palabra clave">
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="tipo_recurso">Tipo de Recurso</label>
                                    <select class="form-control" id="tipo_recurso" name="tipo_recurso">
                                        <option value="">Todos</option>
                                        {% if bibliografia.tipo == 'libro' %}
                                            <option value="books" selected>Libros</option>
                                        {% elseif bibliografia.tipo == 'articulo' %}
                                            <option value="articles" selected>Artículos</option>
                                        {% elseif bibliografia.tipo == 'tesis' %}
                                            <option value="dissertations" selected>Tesis</option>
                                        {% else %}
                                            <option value="books">Libros</option>
                                            <option value="articles">Artículos</option>
                                            <option value="dissertations">Tesis</option>
                                        {% endif %}
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label>&nbsp;</label>
                                    <button type="submit" class="btn btn-primary btn-block">
                                        <i class="fas fa-search"></i> Buscar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>

                    <div id="searchResults" class="mt-4">
                        <!-- Los resultados se mostrarán aquí -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Progreso -->
<div class="modal fade" id="progressModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="progressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="progressModalLabel">Guardando Bibliografías</h5>
            </div>
            <div class="modal-body">
                <div class="progress mb-3">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                </div>
                <p id="progressText" class="text-center mb-0">Iniciando proceso...</p>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
document.getElementById('searchForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = {
        titulo: document.getElementById('titulo').value,
        autor: document.getElementById('autor').value,
        busqueda_adicional: document.getElementById('busqueda_adicional').value,
        tipo_recurso: document.getElementById('tipo_recurso').value
    };

    const resultsDiv = document.getElementById('searchResults');
    resultsDiv.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"><span class="sr-only">Buscando...</span></div></div>';

    try {
        console.log('Enviando petición con datos:', formData);
        
        const response = await fetch('{{ app_url }}bibliografias-declaradas/{{ bibliografia.id }}/buscarCatalogo/api', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(formData)
        });

        console.log('Respuesta recibida:', response);
        console.log('Status:', response.status);
        console.log('Headers:', Object.fromEntries(response.headers.entries()));

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            console.error('Content-Type incorrecto:', contentType);
            throw new Error('El servidor no devolvió una respuesta JSON válida');
        }

        const data = await response.json();
        console.log('Datos recibidos:', data);
        
        if (!data.success) {
            throw new Error(data.message || 'Error al buscar en el catálogo');
        }

        resultsDiv.innerHTML = '';

        if (data.results && data.results.length > 0) {
            const table = document.createElement('table');
            table.className = 'table table-striped';
            
            // Crear encabezado de la tabla
            const thead = document.createElement('thead');
            thead.innerHTML = `
                <tr>
                    <th><input type="checkbox" id="selectAll"></th>
                    <th>Título</th>
                    <th>Autor</th>
                    <th>Año</th>
                    <th>Editorial</th>
                    <th>Formato</th>
                    <th>Acciones</th>
                </tr>
            `;
            table.appendChild(thead);

            // Crear cuerpo de la tabla
            const tbody = document.createElement('tbody');
            data.results.forEach(result => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td><input type="checkbox" class="result-checkbox" data-id="${result.catalogo_id}" data-context="${result.context}" data-adaptor="${result.adaptor}" data-sourcerecordid="${result.sourcerecordid}" data-url="${result.url}"></td>
                    <td>${result.titulo}</td>
                    <td>${result.autores}</td>
                    <td>${result.anio}</td>
                    <td>${result.editorial}</td>
                    <td>${result.formato}</td>
                    <td>
                        <a href="${result.url}" target="_blank" class="btn btn-sm btn-info">
                            <i class="fas fa-external-link-alt"></i> Ver en catálogo
                        </a>
                    </td>
                `;
                tbody.appendChild(tr);
            });
            table.appendChild(tbody);
            resultsDiv.appendChild(table);

            // Agregar botón para guardar selección
            const saveButton = document.createElement('button');
            saveButton.className = 'btn btn-primary mt-3';
            saveButton.innerHTML = '<i class="fas fa-save"></i> Guardar selección';
            saveButton.onclick = function() {
                const selectedIds = Array.from(document.querySelectorAll('.result-checkbox:checked'))
                    .map(checkbox => checkbox.dataset.id);
                if (selectedIds.length > 0) {
                    saveSelectedResults();
                } else {
                    alert('Por favor, seleccione al menos un resultado');
                }
            };
            resultsDiv.appendChild(saveButton);

            // Manejar selección de todos los resultados
            document.getElementById('selectAll').addEventListener('change', function() {
                document.querySelectorAll('.result-checkbox').forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
            });
        } else {
            // Mostrar mensaje de no resultados y opciones de búsqueda alternativa
            resultsDiv.innerHTML = `
                <div class="alert alert-info">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <i class="fas fa-info-circle"></i> No se encontraron resultados en el catálogo
                        </div>
                        <div>
                            <button type="button" class="btn btn-primary me-2" onclick="buscarEnSemanticScholar()">
                                <i class="fas fa-search"></i> Buscar en Semantic Scholar
                            </button>
                            <button type="button" class="btn btn-warning me-2" onclick="buscarEnGoogleScholar()">
                                <i class="fas fa-graduation-cap"></i> Buscar en Google Scholar
                            </button>
                            <button type="button" class="btn btn-info" onclick="buscarEnGoogleBooks()">
                                <i class="fas fa-book"></i> Buscar en Google Books
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error:', error);
        resultsDiv.innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle"></i> ${error.message}
            </div>
        `;
    }
});

async function saveSelectedResults() {
    const checkboxes = document.querySelectorAll('.result-checkbox:checked');
    if (checkboxes.length === 0) {
        alert('Por favor seleccione al menos una bibliografía');
        return;
    }

    // Mostrar el modal de progreso
    const progressModal = new bootstrap.Modal(document.getElementById('progressModal'));
    progressModal.show();

    const progressBar = document.querySelector('.progress-bar');
    const progressText = document.getElementById('progressText');
    const totalItems = checkboxes.length;
    let processedItems = 0;

    const bibliografias = Array.from(checkboxes).map(checkbox => {
        const row = checkbox.closest('tr');
        const context = checkbox.getAttribute('data-context');
        const adaptor = checkbox.getAttribute('data-adaptor');
        let catalogo_id = checkbox.getAttribute('data-catalogo-id');
        if (context === 'L' && adaptor === 'Local Search Engine') {
            const sourcerecordid = checkbox.getAttribute('data-sourcerecordid');
            if (sourcerecordid) {
                catalogo_id = sourcerecordid;
            }
        }
        return {
            catalogo_id: catalogo_id,
            url: checkbox.getAttribute('data-url'),
            context: context || 'L',
            adaptor: adaptor || 'Local Search Engine',
            titulo: row.querySelector('td:nth-child(2)').textContent.trim(),
            autores: row.querySelector('td:nth-child(3)').textContent.trim(),
            anio: row.querySelector('td:nth-child(4)').textContent.trim(),
            editorial: row.querySelector('td:nth-child(5)').textContent.trim()
        };
    });

    const baseUrl = window.location.origin;
    const bibliografiaId = window.location.pathname.split('/')[3];
    const url = `${baseUrl}/biblioges/bibliografias-declaradas/${bibliografiaId}/guardar-seleccionadas`;

    try {
        // Actualizar progreso inicial
        progressText.textContent = 'Enviando datos al servidor...';
        progressBar.style.width = '10%';

        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ bibliografias: bibliografias })
        });

        // Actualizar progreso
        progressBar.style.width = '50%';
        progressText.textContent = 'Procesando respuesta del servidor...';

        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            throw new Error('El servidor no devolvió una respuesta JSON válida');
        }

        const data = await response.json();
        
        if (data.success) {
            // Actualizar progreso final
            progressBar.style.width = '100%';
            progressText.textContent = '¡Proceso completado con éxito!';
            
            // Esperar un momento para mostrar el mensaje de éxito
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // Cerrar el modal de progreso
            progressModal.hide();

            // Mostrar mensaje de éxito
            Swal.fire({
                icon: 'success',
                title: '¡Éxito!',
                text: data.message || 'Bibliografías guardadas correctamente',
                showConfirmButton: false,
                timer: 3000
            }).then(() => {
                // Redirigir a la página de bibliografías
                window.location.href = `${baseUrl}/biblioges/bibliografias-declaradas`;
            });
        } else {
            throw new Error(data.message || 'Error desconocido');
        }
    } catch (error) {
        console.error('Error completo:', error);
        
        // Actualizar progreso en caso de error
        progressBar.style.width = '100%';
        progressBar.classList.remove('progress-bar-striped', 'progress-bar-animated');
        progressBar.classList.add('bg-danger');
        progressText.textContent = 'Error en el proceso';
        
        // Esperar un momento para mostrar el error
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Cerrar el modal de progreso
        progressModal.hide();

        // Mostrar mensaje de error
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Error al guardar las bibliografías',
            confirmButtonText: 'Aceptar'
        });
    }
}

async function buscarEnSemanticScholar() {
    const resultsDiv = document.getElementById('searchResults');
    resultsDiv.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"><span class="sr-only">Buscando...</span></div><p class="mt-2">Buscando en Semantic Scholar...</p></div>';

    const formData = {
        titulo: document.getElementById('titulo').value,
        autor: document.getElementById('autor').value,
        busqueda_adicional: document.getElementById('busqueda_adicional').value,
        tipo_recurso: document.getElementById('tipo_recurso').value,
        fuente: 'semantic_scholar'
    };

    try {
        const response = await fetch('{{ app_url }}bibliografias-declaradas/{{ bibliografia.id }}/buscarGoogle/api', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(formData)
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || 'Error al buscar en Semantic Scholar');
        }

        mostrarResultadosGoogle(data, 'Semantic Scholar');
    } catch (error) {
        console.error('Error:', error);
        resultsDiv.innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle"></i> ${error.message}
            </div>
        `;
    }
}

async function buscarEnGoogleScholar() {
    const resultsDiv = document.getElementById('searchResults');
    resultsDiv.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"><span class="sr-only">Buscando...</span></div><p class="mt-2">Buscando en Google Scholar...</p></div>';

    const formData = {
        titulo: document.getElementById('titulo').value,
        autor: document.getElementById('autor').value,
        busqueda_adicional: document.getElementById('busqueda_adicional').value,
        tipo_recurso: document.getElementById('tipo_recurso').value,
        fuente: 'scholar'
    };

    try {
        const response = await fetch('{{ app_url }}bibliografias-declaradas/{{ bibliografia.id }}/buscarGoogle/api', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(formData)
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || 'Error al buscar en Google Scholar');
        }

        mostrarResultadosGoogle(data, 'Google Scholar');
    } catch (error) {
        console.error('Error:', error);
        resultsDiv.innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle"></i> ${error.message}
            </div>
        `;
    }
}

async function buscarEnGoogleBooks() {
    const resultsDiv = document.getElementById('searchResults');
    resultsDiv.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"><span class="sr-only">Buscando...</span></div><p class="mt-2">Buscando en Google Books...</p></div>';

    const formData = {
        titulo: document.getElementById('titulo').value,
        autor: document.getElementById('autor').value,
        busqueda_adicional: document.getElementById('busqueda_adicional').value,
        tipo_recurso: document.getElementById('tipo_recurso').value,
        fuente: 'books'
    };

    try {
        const response = await fetch('{{ app_url }}bibliografias-declaradas/{{ bibliografia.id }}/buscarGoogle/api', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(formData)
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || 'Error al buscar en Google Books');
        }

        mostrarResultadosGoogle(data, 'Google Books');
    } catch (error) {
        console.error('Error:', error);
        resultsDiv.innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle"></i> ${error.message}
            </div>
        `;
    }
}

function mostrarResultadosGoogle(data, fuente) {
    const resultsDiv = document.getElementById('searchResults');
    resultsDiv.innerHTML = '';

    if (data.results && data.results.length > 0) {
        // Mostrar mensaje de fuente
        const sourceMessage = document.createElement('div');
        sourceMessage.className = 'alert alert-warning mb-3';
        sourceMessage.innerHTML = `
            <i class="fas fa-exclamation-triangle"></i> 
            Resultados obtenidos de ${fuente}
        `;
        resultsDiv.appendChild(sourceMessage);

        const table = document.createElement('table');
        table.className = 'table table-striped';
        
        // Crear encabezado de la tabla
        const thead = document.createElement('thead');
        thead.innerHTML = `
            <tr>
                <th><input type="checkbox" id="selectAll"></th>
                <th>Título</th>
                <th>Autor</th>
                <th>Año</th>
                <th>Editorial</th>
                <th>Formato</th>
                <th>Acciones</th>
            </tr>
        `;
        table.appendChild(thead);

        // Crear cuerpo de la tabla
        const tbody = document.createElement('tbody');
        data.results.forEach(result => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td><input type="checkbox" class="result-checkbox" data-id="${result.catalogo_id}" data-context="${result.context}" data-adaptor="${result.adaptor}" data-sourcerecordid="${result.sourcerecordid}" data-url="${result.url}"></td>
                <td>${result.titulo}</td>
                <td>${result.autores}</td>
                <td>${result.anio}</td>
                <td>${result.editorial}</td>
                <td>${result.formato}</td>
                <td>
                    <a href="${result.url}" target="_blank" class="btn btn-sm btn-info">
                        <i class="fas fa-external-link-alt"></i> Ver en ${fuente}
                    </a>
                </td>
            `;
            tbody.appendChild(tr);
        });
        table.appendChild(tbody);
        resultsDiv.appendChild(table);

        // Agregar botón para guardar selección
        const saveButton = document.createElement('button');
        saveButton.className = 'btn btn-primary mt-3';
        saveButton.innerHTML = '<i class="fas fa-save"></i> Guardar selección';
        saveButton.onclick = function() {
            const selectedIds = Array.from(document.querySelectorAll('.result-checkbox:checked'))
                .map(checkbox => checkbox.dataset.id);
            if (selectedIds.length > 0) {
                saveSelectedResults();
            } else {
                alert('Por favor, seleccione al menos un resultado');
            }
        };
        resultsDiv.appendChild(saveButton);

        // Manejar selección de todos los resultados
        document.getElementById('selectAll').addEventListener('change', function() {
            document.querySelectorAll('.result-checkbox').forEach(checkbox => {
                checkbox.checked = this.checked;
            });
        });
    } else {
        resultsDiv.innerHTML = `
            <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle"></i> 
                No se encontraron resultados en ${fuente}
            </div>
        `;
    }
}
</script>
{% endblock %} 